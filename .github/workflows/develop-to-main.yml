name: Develop to Main PR

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.11.3"

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ github.workspace }}

      - name: Terraform Init and Validate
        run: |
          # Clean up any existing Terraform files
          rm -rf .terraform*

          # Remove backend configurations from module files
          find . -type f -name "*.tf" -exec sed -i '/backend\s*"s3"/d' {} \;

          # Create root backend configuration
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {}
          }
          EOF

          # Initialize Terraform
          terraform init -backend=false

          # Validate Terraform configuration
          terraform validate

          # Clean up
          rm -f backend.tf
        working-directory: ${{ github.workspace }}

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

          # Parse version components
          IFS='.' read -r -a version_parts <<< "${latest_tag//v/}"
          major="${version_parts[0]}"
          minor="${version_parts[1]}"
          patch="${version_parts[2]}"

          # Increment patch version
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$new_patch" >> $GITHUB_OUTPUT

      - name: Check Existing PR
        id: check-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const head = `${owner}:develop`; // ‚úÖ Use full ref

            const prs = await github.rest.pulls.list({
              owner,
              repo,
              head,
              base: 'main',
              state: 'open'
            });

            const prNumber = prs.data.length > 0 ? prs.data[0].number : '';
            core.setOutput('pr_number', prNumber);

      - name: Create Pull Request
        id: create-pr
        if: steps.check-pr.outputs.pr_number == ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const newTag = '${{ steps.get_latest_tag.outputs.new_tag }}';

            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: `üöÄ Release: ${newTag}`,
              body: `Este PR foi criado automaticamente para release.
              
              ## Altera√ß√µes
              - Nova vers√£o: \`${newTag}\`
              - Terraform validado com sucesso ‚úÖ
              - Formata√ß√£o do c√≥digo verificada ‚úÖ
              
              ## Checklist
              - [ ] C√≥digo formatado corretamente
              - [ ] Valida√ß√£o do Terraform passou
              - [ ] Documenta√ß√£o atualizada
              - [ ] Testes realizados
              - [ ] Aprovado para release
              
              ## Versionamento
              - Vers√£o atual: \`${{ steps.get_latest_tag.outputs.latest_tag }}\`
              - Nova vers√£o: \`${newTag}\`
              - Incremento: Patch (+1)`,
              head: 'develop',
              base: 'main',
              // Removed draft: true to create a regular pull request
            });

            core.setOutput('pr_number', pr.data.number);
            console.log(`üöÄ Created PR: #${pr.data.number}`);
            return pr.data.number;

      - name: Add Labels
        uses: actions/github-script@v6
        env:
          EXISTING_PR: ${{ steps.check-pr.outputs.result }}
          NEW_PR: ${{ steps.create-pr.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = process.env.EXISTING_PR || process.env.NEW_PR;

            if (prNumber) {
              try {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: ['release', 'auto-pr', 'terraform']
                });
              } catch (error) {
                console.log('‚ö†Ô∏è Could not add labels:', error.message);
              }
            } else {
              console.log('‚ÑπÔ∏è No PR number available, skipping label addition.');
            }
